name: Build Android APK

on:
  push:
    tags:
      - "v*"   # Crée une release quand tu push un tag comme v1.0.0, v1.1.0, etc.
  workflow_dispatch:

permissions:
  contents: write  # nécessaire pour créer et modifier des releases

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      JAVA_TOOL_OPTIONS: -Xmx4g

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3️⃣ Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4️⃣ Install JS dependencies
      - name: Install dependencies
        run: npm install

      # 5️⃣ Prebuild Expo
      - name: Prebuild Expo
        run: npm run prebuild

      # 6️⃣ Setup Java 17
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 7️⃣ Check Java version
      - name: Check Java
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version

      # 8️⃣ Cache Android SDK
      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROID_HOME }}
          key: ${{ runner.os }}-android-sdk

      # 9️⃣ Setup Android SDK (si cache vide)
      - name: Setup Android SDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      # 🔟 Créer local.properties pour Gradle
      - name: Create local.properties
        run: echo "sdk.dir=$ANDROID_HOME" > android/local.properties

      # 1️⃣1️⃣ Build Release APKs
      - name: Build Release APKs
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew clean assembleRelease

      # 1️⃣2️⃣ Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      # 1️⃣3️⃣ Upload all APKs from release folder
      - name: Upload APKs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const path = require("path");
            const uploadUrl = "${{ steps.create_release.outputs.upload_url }}";
            const dir = "android/app/build/outputs/apk/release";
            const files = fs.readdirSync(dir).filter(f => f.endsWith(".apk"));

            for (const file of files) {
              const filePath = path.join(dir, file);
              console.log(`Uploading ${filePath}...`);
              await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: { "content-type": "application/vnd.android.package-archive" },
                name: file,
                data: fs.readFileSync(filePath)
              });
            }
